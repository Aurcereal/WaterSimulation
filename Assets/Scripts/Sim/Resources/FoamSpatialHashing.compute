#pragma kernel UpdateSpatialHashEntries
#pragma kernel UpdateSpatialHashOffsets

// This struct can be used for both foam and regular water
struct ParticleEntry {
    int particleIndex;
    int key;
};

struct FoamParticle {
    float3 position;
    float3 velocity;
    float remainingLifetime;
    int debugType;
};

RWStructuredBuffer<ParticleEntry> foamCellKeyEntries;
RWStructuredBuffer<int> cellKeyToStartCoord;

RWStructuredBuffer<FoamParticle> updatingFoamParticles;
RWStructuredBuffer<uint> foamParticleCounts; // (updatingFoamParticleCount, survivingFoamParticleCount)
const uint MaxFoamParticleCount;

const int FoamSpatialLookupSize;
const float FoamGridSize;

int imod(int i, int m)
{
    if (i >= 0) return uint(i) % uint(m);
    else return m - 1 - (uint(-i) % uint(m));
}

int hash31(int3 coord)
{
    return imod(949937 + 119227 * coord.x + 370673 * coord.y + 440537 * coord.z, FoamSpatialLookupSize);
}

int getStartIndex(int key) {
    return cellKeyToStartCoord[key];
}

int getCellKey(int3 cellPos) {
    return hash31(cellPos); // RVS
}

int3 posToCell(float3 pos) {
    return int3(floor(pos/FoamGridSize));
}

[numthreads(256, 1,1)]
void UpdateSpatialHashEntries (uint3 id : SV_DispatchThreadID)
{
    int i = id.x;
    if(i >= foamParticleCounts[0]) return;

    int3 cell = posToCell(updatingFoamParticles[i].position);
    int key = getCellKey(cell);

    ParticleEntry e;
    e.particleIndex = i;
    e.key = key;

    foamCellKeyEntries[i] = e;
}

[numthreads(256, 1,1)]
void UpdateSpatialHashOffsets (uint3 id : SV_DispatchThreadID)
{
    int i = id.x;
    if(i >= foamParticleCounts[0]) return;

    // Check if the current index in the Particle Array is a start index
    if(i==0) { // ODOT: i == 0 check causing bad performance?
        ParticleEntry e = foamCellKeyEntries[0];
        cellKeyToStartCoord[e.key] = i;
    } else {
        ParticleEntry eCurr = foamCellKeyEntries[i];
        ParticleEntry ePrev = foamCellKeyEntries[i-1];

        if(eCurr.key != ePrev.key) {
            cellKeyToStartCoord[eCurr.key] = i;
        }
    }
}

